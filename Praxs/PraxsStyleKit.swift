//
//  PraxsStyleKit.swift
//  Praxs
//
//  Created by Denis Ricard on 2017-04-25.
//  Copyright Â© 2017 Hexaedre. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PraxsStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let context_01_color: UIColor = UIColor(red: 0.926, green: 0.705, blue: 0.395, alpha: 1.000)
        static let context_01_textColor: UIColor = PraxsStyleKit.context_01_color.shadow(withLevel: 0.6)
        static let context_02_color: UIColor = UIColor(red: 0.947, green: 0.914, blue: 0.472, alpha: 1.000)
        static let context_03_color: UIColor = UIColor(red: 0.300, green: 0.382, blue: 0.420, alpha: 1.000)
        static let context_04_color: UIColor = UIColor(red: 0.656, green: 0.811, blue: 0.895, alpha: 1.000)
        static let context_05_color: UIColor = UIColor(red: 0.641, green: 0.752, blue: 0.433, alpha: 1.000)
        static let context_02_textColor: UIColor = PraxsStyleKit.context_02_color.shadow(withLevel: 0.6)
        static let context_03_textColor: UIColor = PraxsStyleKit.context_03_color.highlight(withLevel: 0.6)
        static let context_04_textColor: UIColor = PraxsStyleKit.context_04_color.shadow(withLevel: 0.6)
        static let context_05_textColor: UIColor = PraxsStyleKit.context_05_color.shadow(withLevel: 0.6)
    }

    //// Colors

    public dynamic class var context_01_color: UIColor { return Cache.context_01_color }
    public dynamic class var context_01_textColor: UIColor { return Cache.context_01_textColor }
    public dynamic class var context_02_color: UIColor { return Cache.context_02_color }
    public dynamic class var context_03_color: UIColor { return Cache.context_03_color }
    public dynamic class var context_04_color: UIColor { return Cache.context_04_color }
    public dynamic class var context_05_color: UIColor { return Cache.context_05_color }
    public dynamic class var context_02_textColor: UIColor { return Cache.context_02_textColor }
    public dynamic class var context_03_textColor: UIColor { return Cache.context_03_textColor }
    public dynamic class var context_04_textColor: UIColor { return Cache.context_04_textColor }
    public dynamic class var context_05_textColor: UIColor { return Cache.context_05_textColor }

    //// Drawing Methods

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 89, height: 139), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 89, height: 139), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 89, y: resizedFrame.height / 139)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 9, y: 10, width: 15, height: 15))
        PraxsStyleKit.context_01_color.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 35, y: 10, width: 15, height: 15))
        PraxsStyleKit.context_01_textColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 9, y: 28, width: 15, height: 15))
        PraxsStyleKit.context_02_color.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 35, y: 28.5, width: 15, height: 15))
        PraxsStyleKit.context_02_textColor.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 9, y: 46.5, width: 15, height: 15))
        PraxsStyleKit.context_03_color.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 35, y: 46.5, width: 15, height: 15))
        PraxsStyleKit.context_03_textColor.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 9, y: 65, width: 15, height: 15))
        PraxsStyleKit.context_04_color.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 35, y: 65.5, width: 15, height: 15))
        PraxsStyleKit.context_04_textColor.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 35, y: 85, width: 15, height: 15))
        PraxsStyleKit.context_05_textColor.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 9, y: 85, width: 15, height: 15))
        PraxsStyleKit.context_05_color.setFill()
        rectangle10Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTopHandle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 46, height: 6), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 46, height: 6), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 46, y: resizedFrame.height / 6)


        //// Group 2
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0.5, y: 0.5, width: 45, height: 5), byRoundingCorners: [.bottomLeft, .bottomRight], cornerRadii: CGSize(width: 2, height: 2))
        rectanglePath.close()
        PraxsStyleKit.context_04_color.setFill()
        rectanglePath.fill()
        PraxsStyleKit.context_04_textColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 3, y: 1.5, width: 40, height: 1), cornerRadius: 0.5)
        PraxsStyleKit.context_04_textColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 3, y: 3, width: 40, height: 1), cornerRadius: 0.5)
        PraxsStyleKit.context_04_textColor.setFill()
        rectangle3Path.fill()
        
        context.restoreGState()

    }




    @objc(PraxsStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
