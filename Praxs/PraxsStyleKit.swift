//
//  PraxsStyleKit.swift
//  Praxs
//
//  Created by Denis Ricard on 2017-05-05.
//  Copyright Â© 2017 Hexaedre. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PraxsStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let context_01_color: UIColor = UIColor(red: 0.926, green: 0.705, blue: 0.395, alpha: 1.000)
        static let context_01_textColor: UIColor = PraxsStyleKit.context_01_color.shadow(withLevel: 0.6)
        static let context_02_color: UIColor = UIColor(red: 0.947, green: 0.914, blue: 0.472, alpha: 1.000)
        static let context_03_color: UIColor = UIColor(red: 0.300, green: 0.382, blue: 0.420, alpha: 1.000)
        static let context_04_color: UIColor = UIColor(red: 0.656, green: 0.811, blue: 0.895, alpha: 1.000)
        static let context_05_color: UIColor = UIColor(red: 0.641, green: 0.752, blue: 0.433, alpha: 1.000)
        static let context_02_textColor: UIColor = PraxsStyleKit.context_02_color.shadow(withLevel: 0.6)
        static let context_03_textColor: UIColor = PraxsStyleKit.context_03_color.highlight(withLevel: 0.6)
        static let context_04_textColor: UIColor = PraxsStyleKit.context_04_color.shadow(withLevel: 0.6)
        static let context_05_textColor: UIColor = PraxsStyleKit.context_05_color.shadow(withLevel: 0.6)
        static var imageOfIcon_835: UIImage?
        static var icon_835Targets: [AnyObject]?
        static var imageOfIcon_76: UIImage?
        static var icon_76Targets: [AnyObject]?
        static var imageOfIcon_60: UIImage?
        static var icon_60Targets: [AnyObject]?
        static var imageOfIcon_40: UIImage?
        static var icon_40Targets: [AnyObject]?
        static var imageOfIcon_29: UIImage?
        static var icon_29Targets: [AnyObject]?
        static var imageOfIcon_20: UIImage?
        static var icon_20Targets: [AnyObject]?
        static var imageOfDoneCheck: UIImage?
        static var doneCheckTargets: [AnyObject]?
        static var imageOfNotDoneCheck: UIImage?
        static var notDoneCheckTargets: [AnyObject]?
    }

    //// Colors

    public dynamic class var context_01_color: UIColor { return Cache.context_01_color }
    public dynamic class var context_01_textColor: UIColor { return Cache.context_01_textColor }
    public dynamic class var context_02_color: UIColor { return Cache.context_02_color }
    public dynamic class var context_03_color: UIColor { return Cache.context_03_color }
    public dynamic class var context_04_color: UIColor { return Cache.context_04_color }
    public dynamic class var context_05_color: UIColor { return Cache.context_05_color }
    public dynamic class var context_02_textColor: UIColor { return Cache.context_02_textColor }
    public dynamic class var context_03_textColor: UIColor { return Cache.context_03_textColor }
    public dynamic class var context_04_textColor: UIColor { return Cache.context_04_textColor }
    public dynamic class var context_05_textColor: UIColor { return Cache.context_05_textColor }

    //// Drawing Methods

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 89, height: 139), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 89, height: 139), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 89, y: resizedFrame.height / 139)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 9, y: 10, width: 15, height: 15))
        PraxsStyleKit.context_01_color.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 35, y: 10, width: 15, height: 15))
        PraxsStyleKit.context_01_textColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 9, y: 28, width: 15, height: 15))
        PraxsStyleKit.context_02_color.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 35, y: 28.5, width: 15, height: 15))
        PraxsStyleKit.context_02_textColor.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 9, y: 46.5, width: 15, height: 15))
        PraxsStyleKit.context_03_color.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 35, y: 46.5, width: 15, height: 15))
        PraxsStyleKit.context_03_textColor.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 9, y: 65, width: 15, height: 15))
        PraxsStyleKit.context_04_color.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 35, y: 65.5, width: 15, height: 15))
        PraxsStyleKit.context_04_textColor.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 35, y: 85, width: 15, height: 15))
        PraxsStyleKit.context_05_textColor.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 9, y: 85, width: 15, height: 15))
        PraxsStyleKit.context_05_color.setFill()
        rectangle10Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTopHandle(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 46, height: 6), resizing: ResizingBehavior = .aspectFit, fillColor: UIColor = UIColor(red: 0.563, green: 0.690, blue: 0.853, alpha: 1.000), strokeColor: UIColor = UIColor(red: 0.290, green: 0.290, blue: 0.290, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 46, height: 6), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 46, y: resizedFrame.height / 6)


        //// Group 2
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0.5, y: 0.5, width: 45, height: 5), byRoundingCorners: [.bottomLeft, .bottomRight], cornerRadii: CGSize(width: 2, height: 2))
        rectanglePath.close()
        fillColor.setFill()
        rectanglePath.fill()
        strokeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 4, y: 1.5, width: 38, height: 1), cornerRadius: 0.5)
        strokeColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 7, y: 3, width: 32, height: 1), cornerRadius: 0.5)
        strokeColor.setFill()
        rectangle3Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_835(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 167, height: 167), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 167, height: 167), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 167, y: resizedFrame.height / 167)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 167, height: 167))
        PraxsStyleKit.context_04_color.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 3, y: 3, width: 150, height: 150)
        let textTextContent = "P"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 200)!, NSForegroundColorAttributeName: PraxsStyleKit.context_03_color, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 77, y: 7, width: 90, height: 150)
        let text2TextContent = "r"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 200)!, NSForegroundColorAttributeName: PraxsStyleKit.context_02_color, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_76(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 76, height: 76), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 76, height: 76), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 76, y: resizedFrame.height / 76)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 76, height: 76))
        PraxsStyleKit.context_04_color.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 17, y: 3, width: 50, height: 70)
        let textTextContent = "P"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 70)!, NSForegroundColorAttributeName: PraxsStyleKit.context_03_color, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 41, y: 20, width: 30, height: 50)
        let text2TextContent = "r"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 50)!, NSForegroundColorAttributeName: PraxsStyleKit.context_02_color, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_60(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 60, height: 60))
        PraxsStyleKit.context_04_color.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 10, y: 6, width: 40, height: 50)
        let textTextContent = "P"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 65)!, NSForegroundColorAttributeName: PraxsStyleKit.context_03_color, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 30, y: 19, width: 25, height: 40)
        let text2TextContent = "r"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 40)!, NSForegroundColorAttributeName: PraxsStyleKit.context_02_color, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_40(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 120, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 120)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 120, height: 120))
        PraxsStyleKit.context_04_color.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 8, y: 7, width: 100, height: 100)
        let textTextContent = "P"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 133.3)!, NSForegroundColorAttributeName: PraxsStyleKit.context_03_color, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 60, y: 10, width: 60, height: 100)
        let text2TextContent = "r"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 133.3)!, NSForegroundColorAttributeName: PraxsStyleKit.context_02_color, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_29(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 87, height: 87), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 87, height: 87), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 87, y: resizedFrame.height / 87)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 87, height: 87))
        PraxsStyleKit.context_04_color.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 5, y: 3, width: 70, height: 80)
        let textTextContent = "P"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 110)!, NSForegroundColorAttributeName: PraxsStyleKit.context_03_color, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 47, y: 13, width: 40, height: 74)
        let text2TextContent = "r"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 90)!, NSForegroundColorAttributeName: PraxsStyleKit.context_02_color, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 60, height: 60))
        PraxsStyleKit.context_04_color.setFill()
        rectanglePath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 0, y: 0, width: 60, height: 60)
        let textTextContent = "P"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 80)!, NSForegroundColorAttributeName: PraxsStyleKit.context_03_color, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 30, y: 6, width: 30, height: 50)
        let text2TextContent = "r"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .left
        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "ConcourseT8", size: 70)!, NSForegroundColorAttributeName: PraxsStyleKit.context_02_color, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawDoneCheck(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let doneColor = UIColor(red: 0.641, green: 1.000, blue: 0.593, alpha: 1.000)
        let doneDarkerColor = doneColor.shadow(withLevel: 0.4)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 24, height: 24))
        doneColor.setFill()
        ovalPath.fill()
        doneDarkerColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 15.29))
        bezierPath.addLine(to: CGPoint(x: 14.08, y: 20))
        bezierPath.addLine(to: CGPoint(x: 20, y: 9))
        doneColor.setFill()
        bezierPath.fill()
        doneDarkerColor.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    public dynamic class func drawNotDoneCheck(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let notDoneColor = UIColor(red: 1.000, green: 0.305, blue: 0.305, alpha: 1.000)
        let notDoneDarkerColor = notDoneColor.shadow(withLevel: 0.4)

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 24, height: 24))
        notDoneColor.setFill()
        oval2Path.fill()
        notDoneDarkerColor.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Group
        context.saveGState()
        context.translateBy(x: 15, y: 15)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -6, y: -6))
        bezierPath.addLine(to: CGPoint(x: 5, y: 5))
        notDoneColor.setFill()
        bezierPath.fill()
        notDoneDarkerColor.setStroke()
        bezierPath.lineWidth = 3
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        context.saveGState()
        context.translateBy(x: -6, y: 5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 11, y: 11))
        notDoneColor.setFill()
        bezier2Path.fill()
        notDoneDarkerColor.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()

        context.restoreGState()



        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfIcon_835: UIImage {
        if Cache.imageOfIcon_835 != nil {
            return Cache.imageOfIcon_835!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 167, height: 167), false, 0)
            PraxsStyleKit.drawIcon_835()

        Cache.imageOfIcon_835 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_835!
    }

    public dynamic class var imageOfIcon_76: UIImage {
        if Cache.imageOfIcon_76 != nil {
            return Cache.imageOfIcon_76!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 76, height: 76), false, 0)
            PraxsStyleKit.drawIcon_76()

        Cache.imageOfIcon_76 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_76!
    }

    public dynamic class var imageOfIcon_60: UIImage {
        if Cache.imageOfIcon_60 != nil {
            return Cache.imageOfIcon_60!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            PraxsStyleKit.drawIcon_60()

        Cache.imageOfIcon_60 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_60!
    }

    public dynamic class var imageOfIcon_40: UIImage {
        if Cache.imageOfIcon_40 != nil {
            return Cache.imageOfIcon_40!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 120, height: 120), false, 0)
            PraxsStyleKit.drawIcon_40()

        Cache.imageOfIcon_40 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_40!
    }

    public dynamic class var imageOfIcon_29: UIImage {
        if Cache.imageOfIcon_29 != nil {
            return Cache.imageOfIcon_29!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 87, height: 87), false, 0)
            PraxsStyleKit.drawIcon_29()

        Cache.imageOfIcon_29 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_29!
    }

    public dynamic class var imageOfIcon_20: UIImage {
        if Cache.imageOfIcon_20 != nil {
            return Cache.imageOfIcon_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            PraxsStyleKit.drawIcon_20()

        Cache.imageOfIcon_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_20!
    }

    public dynamic class var imageOfDoneCheck: UIImage {
        if Cache.imageOfDoneCheck != nil {
            return Cache.imageOfDoneCheck!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            PraxsStyleKit.drawDoneCheck()

        Cache.imageOfDoneCheck = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDoneCheck!
    }

    public dynamic class var imageOfNotDoneCheck: UIImage {
        if Cache.imageOfNotDoneCheck != nil {
            return Cache.imageOfNotDoneCheck!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            PraxsStyleKit.drawNotDoneCheck()

        Cache.imageOfNotDoneCheck = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfNotDoneCheck!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var icon_835Targets: [AnyObject]! {
        get { return Cache.icon_835Targets }
        set {
            Cache.icon_835Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PraxsStyleKit.imageOfIcon_835)
            }
        }
    }

    @IBOutlet dynamic var icon_76Targets: [AnyObject]! {
        get { return Cache.icon_76Targets }
        set {
            Cache.icon_76Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PraxsStyleKit.imageOfIcon_76)
            }
        }
    }

    @IBOutlet dynamic var icon_60Targets: [AnyObject]! {
        get { return Cache.icon_60Targets }
        set {
            Cache.icon_60Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PraxsStyleKit.imageOfIcon_60)
            }
        }
    }

    @IBOutlet dynamic var icon_40Targets: [AnyObject]! {
        get { return Cache.icon_40Targets }
        set {
            Cache.icon_40Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PraxsStyleKit.imageOfIcon_40)
            }
        }
    }

    @IBOutlet dynamic var icon_29Targets: [AnyObject]! {
        get { return Cache.icon_29Targets }
        set {
            Cache.icon_29Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PraxsStyleKit.imageOfIcon_29)
            }
        }
    }

    @IBOutlet dynamic var icon_20Targets: [AnyObject]! {
        get { return Cache.icon_20Targets }
        set {
            Cache.icon_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PraxsStyleKit.imageOfIcon_20)
            }
        }
    }

    @IBOutlet dynamic var doneCheckTargets: [AnyObject]! {
        get { return Cache.doneCheckTargets }
        set {
            Cache.doneCheckTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PraxsStyleKit.imageOfDoneCheck)
            }
        }
    }

    @IBOutlet dynamic var notDoneCheckTargets: [AnyObject]! {
        get { return Cache.notDoneCheckTargets }
        set {
            Cache.notDoneCheckTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: PraxsStyleKit.imageOfNotDoneCheck)
            }
        }
    }




    @objc(PraxsStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
